//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 World;          // Offset:    0 Size:    64
//   row_major float4x4 matWVP;         // Offset:   64 Size:    64
//
// }
//
// cbuffer CBPerFrame2
// {
//
//   float Density;                     // Offset:    0 Size:     4 [unused]
//   float Distance;                    // Offset:    4 Size:     4
//   float dummy1;                      // Offset:    8 Size:     4 [unused]
//   float dummy2;                      // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
// CBPerFrame2                       cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
//
gs_4_0
dcl_constantbuffer CB0[8], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_input v[3][0].xyzw
dcl_input v[3][1].xyz
dcl_input v[3][2].xy
dcl_temps 8
dcl_inputprimitive triangle 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_maxout 24
//
// Initial variable locations:
//   m0 <- Stream; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; v[0][0].w <- input[0].Position.w; 
//   v[0][1].x <- input[0].Normal.x; v[0][1].y <- input[0].Normal.y; v[0][1].z <- input[0].Normal.z; 
//   v[0][2].x <- input[0].Tex.x; v[0][2].y <- input[0].Tex.y; 
//   v[1][0].x <- input[1].Position.x; v[1][0].y <- input[1].Position.y; v[1][0].z <- input[1].Position.z; v[1][0].w <- input[1].Position.w; 
//   v[1][1].x <- input[1].Normal.x; v[1][1].y <- input[1].Normal.y; v[1][1].z <- input[1].Normal.z; 
//   v[1][2].x <- input[1].Tex.x; v[1][2].y <- input[1].Tex.y; 
//   v[2][0].x <- input[2].Position.x; v[2][0].y <- input[2].Position.y; v[2][0].z <- input[2].Position.z; v[2][0].w <- input[2].Position.w; 
//   v[2][1].x <- input[2].Normal.x; v[2][1].y <- input[2].Normal.y; v[2][1].z <- input[2].Normal.z; 
//   v[2][2].x <- input[2].Tex.x; v[2][2].y <- input[2].Tex.y
//
#line 13 "D:\授業データ\教材\3\シェーダプログラミングⅡ\ShaderProjectⅡ(学生配布ver.2)\Shaders\furShader.hlsli"
mov r0.x, l(8)  // r0.x <- LAYER

#line 9 "D:\授業チEEタ\教材\3\シェーダプログラミングⅡ\ShaderProjectⅡ(学生Evver.2)\Shaders\furShader_gs.hlsl"
mov r0.y, l(0)  // r0.y <- j
mov r0.z, r0.y  // r0.z <- j
loop 
  ilt r0.w, r0.z, r0.x
  breakc_z r0.w

#line 10
  mov r0.w, l(0)  // r0.w <- i
  mov r1.x, r0.w  // r1.x <- i
  loop 
    ilt r1.y, r1.x, l(3)
    breakc_z r1.y

#line 12
    mov r2.xyzw, v[r1.x + 0][0].xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 13
    mul r1.yzw, cb3[0].yyyy, v[r1.x + 0][1].xxyz
    itof r3.xyz, r0.zzzz
    mul r1.yzw, r1.yyzw, r3.xxyz
    add r1.yzw, r1.yyzw, r2.xxyz  // r1.y <- P.x; r1.z <- P.y; r1.w <- P.z

#line 14
    mul r3.xyzw, r1.yyyy, cb0[4].xyzw
    mul r4.xyzw, r1.zzzz, cb0[5].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw
    mul r4.xyzw, r1.wwww, cb0[6].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw
    mul r4.xyzw, r2.wwww, cb0[7].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- data.Position.x; r3.y <- data.Position.y; r3.z <- data.Position.z; r3.w <- data.Position.w

#line 15
    mul r2.xyz, cb0[0].xyzx, v[r1.x + 0][1].xxxx
    mul r4.xyz, cb0[1].xyzx, v[r1.x + 0][1].yyyy
    add r2.xyz, r2.xyzx, r4.xyzx
    mul r4.xyz, cb0[2].xyzx, v[r1.x + 0][1].zzzz
    add r2.xyz, r2.xyzx, r4.xyzx
    dp3 r4.x, r2.xyzx, r2.xyzx
    rsq r4.x, r4.x
    mul r2.xyz, r2.xyzx, r4.xxxx  // r2.x <- data.wNormal.x; r2.y <- data.wNormal.y; r2.z <- data.wNormal.z

#line 17
    mov r4.xy, v[r1.x + 0][2].xyxx  // r4.x <- data.Tex.x; r4.y <- data.Tex.y

#line 18
    itof r5.xyzw, l(1, 1, 1, 1)  // r5.x <- data.Color.x; r5.y <- data.Color.y; r5.z <- data.Color.z; r5.w <- data.Color.w

#line 19
    mul r6.xyz, r1.yyyy, cb0[0].xyzx
    mul r7.xyz, r1.zzzz, cb0[1].xyzx
    add r6.xyz, r6.xyzx, r7.xyzx
    mul r1.yzw, r1.wwww, cb0[2].xxyz
    add r1.yzw, r1.yyzw, r6.xxyz
    mul r6.xyz, r2.wwww, cb0[3].xyzx
    add r1.yzw, r1.yyzw, r6.xxyz  // r1.y <- data.wPos.x; r1.z <- data.wPos.y; r1.w <- data.wPos.z

#line 20
    mov o0.xyzw, r3.xyzw
    mov o1.xy, r4.xyxx
    mov o2.xyzw, r5.xyzw
    mov o3.xyz, r2.xyzx
    mov o4.xyz, r1.yzwy
    emit 

#line 21
    iadd r1.x, r1.x, l(1)
  endloop 

#line 22
  iadd r0.z, r0.z, l(1)
endloop 

#line 23
cut 

#line 24
ret 
// Approximately 52 instruction slots used
