//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 World;          // Offset:    0 Size:    64
//   row_major float4x4 matWVP;         // Offset:   64 Size:    64
//
// }
//
// cbuffer CBPerFrame3
// {
//
//   float4 Paramter;                   // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
// CBPerFrame3                       cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[8], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_input v[3][0].xyz
dcl_input v[3][1].xyz
dcl_input v[3][2].xy
dcl_input v[3][3].xyzw
dcl_temps 5
dcl_inputprimitive triangle 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xy
dcl_output o4.xyzw
dcl_maxout 6
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; 
//   v[0][1].x <- input[0].Normal.x; v[0][1].y <- input[0].Normal.y; v[0][1].z <- input[0].Normal.z; 
//   v[0][2].x <- input[0].Tex.x; v[0][2].y <- input[0].Tex.y; 
//   v[0][3].x <- input[0].Color.x; v[0][3].y <- input[0].Color.y; v[0][3].z <- input[0].Color.z; v[0][3].w <- input[0].Color.w; 
//   v[1][0].x <- input[1].Position.x; v[1][0].y <- input[1].Position.y; v[1][0].z <- input[1].Position.z; 
//   v[1][1].x <- input[1].Normal.x; v[1][1].y <- input[1].Normal.y; v[1][1].z <- input[1].Normal.z; 
//   v[1][2].x <- input[1].Tex.x; v[1][2].y <- input[1].Tex.y; 
//   v[1][3].x <- input[1].Color.x; v[1][3].y <- input[1].Color.y; v[1][3].z <- input[1].Color.z; v[1][3].w <- input[1].Color.w; 
//   v[2][0].x <- input[2].Position.x; v[2][0].y <- input[2].Position.y; v[2][0].z <- input[2].Position.z; 
//   v[2][1].x <- input[2].Normal.x; v[2][1].y <- input[2].Normal.y; v[2][1].z <- input[2].Normal.z; 
//   v[2][2].x <- input[2].Tex.x; v[2][2].y <- input[2].Tex.y; 
//   v[2][3].x <- input[2].Color.x; v[2][3].y <- input[2].Color.y; v[2][3].z <- input[2].Color.z; v[2][3].w <- input[2].Color.w
//
#line 11 "D:\授業チEEタ\教材\3\シェーダプログラミングⅡ\ShaderProjectⅡ(学生Eɘver.2)\Shaders\ToonRendering_gs.hlsl"
mov r0.x, l(0)  // r0.x <- i
mov r0.y, r0.x  // r0.y <- i
loop 
  ilt r0.z, r0.y, l(3)
  breakc_z r0.z

#line 13
  itof r0.z, l(1)
  mul r1.xyzw, cb0[4].xyzw, v[r0.y + 0][0].xxxx
  mul r2.xyzw, cb0[5].xyzw, v[r0.y + 0][0].yyyy
  add r1.xyzw, r1.xyzw, r2.xyzw
  mul r2.xyzw, cb0[6].xyzw, v[r0.y + 0][0].zzzz
  add r1.xyzw, r1.xyzw, r2.xyzw
  mul r2.xyzw, r0.zzzz, cb0[7].xyzw
  add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- element.Position.x; r1.y <- element.Position.y; r1.z <- element.Position.z; r1.w <- element.Position.w

#line 14
  itof r0.z, l(0)
  mul r2.xyz, cb0[0].xyzx, v[r0.y + 0][1].xxxx
  mul r3.xyz, cb0[1].xyzx, v[r0.y + 0][1].yyyy
  add r2.xyz, r2.xyzx, r3.xyzx
  mul r3.xyz, cb0[2].xyzx, v[r0.y + 0][1].zzzz
  add r2.xyz, r2.xyzx, r3.xyzx
  mul r3.xyz, r0.zzzz, cb0[3].xyzx
  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- element.wNormal.x; r2.y <- element.wNormal.y; r2.z <- element.wNormal.z

#line 15
  itof r0.z, l(1)
  mul r3.xyz, cb0[0].xyzx, v[r0.y + 0][0].xxxx
  mul r4.xyz, cb0[1].xyzx, v[r0.y + 0][0].yyyy
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, cb0[2].xyzx, v[r0.y + 0][0].zzzz
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, r0.zzzz, cb0[3].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- element.wPosition.x; r3.y <- element.wPosition.y; r3.z <- element.wPosition.z

#line 16
  mov r0.zw, v[r0.y + 0][2].xxxy  // r0.z <- element.Tex.x; r0.w <- element.Tex.y

#line 17
  mov r4.xyzw, v[r0.y + 0][3].xyzw  // r4.x <- element.Color.x; r4.y <- element.Color.y; r4.z <- element.Color.z; r4.w <- element.Color.w

#line 19
  mov o0.xyzw, r1.xyzw
  mov o1.xyz, r2.xyzx
  mov o2.xyz, r3.xyzx
  mov o3.xy, r0.zwzz
  mov o4.xyzw, r4.xyzw
  emit_stream m0

#line 20
  iadd r0.y, r0.y, l(1)
endloop 

#line 23
cut_stream m0

#line 26
mov r0.x, l(2)  // r0.x <- i
mov r0.y, r0.x  // r0.y <- i
loop 
  ige r0.z, r0.y, l(0)
  breakc_z r0.z

#line 28
  mov r0.z, r0.y
  mul r1.xyz, cb3[0].xxxx, v[r0.y + 0][1].xyzx
  add r1.xyz, r1.xyzx, v[r0.z + 0][0].xyzx
  itof r0.z, l(1)
  mul r2.xyzw, r1.xxxx, cb0[4].xyzw
  mul r3.xyzw, r1.yyyy, cb0[5].xyzw
  add r2.xyzw, r2.xyzw, r3.xyzw
  mul r1.xyzw, r1.zzzz, cb0[6].xyzw
  add r1.xyzw, r1.xyzw, r2.xyzw
  mul r2.xyzw, r0.zzzz, cb0[7].xyzw
  add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- element.Position.x; r1.y <- element.Position.y; r1.z <- element.Position.z; r1.w <- element.Position.w

#line 29
  itof r0.z, l(0)
  mul r2.xyz, cb0[0].xyzx, v[r0.y + 0][1].xxxx
  mul r3.xyz, cb0[1].xyzx, v[r0.y + 0][1].yyyy
  add r2.xyz, r2.xyzx, r3.xyzx
  mul r3.xyz, cb0[2].xyzx, v[r0.y + 0][1].zzzz
  add r2.xyz, r2.xyzx, r3.xyzx
  mul r3.xyz, r0.zzzz, cb0[3].xyzx
  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- element.wNormal.x; r2.y <- element.wNormal.y; r2.z <- element.wNormal.z

#line 30
  itof r0.z, l(1)
  mul r3.xyz, cb0[0].xyzx, v[r0.y + 0][0].xxxx
  mul r4.xyz, cb0[1].xyzx, v[r0.y + 0][0].yyyy
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, cb0[2].xyzx, v[r0.y + 0][0].zzzz
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, r0.zzzz, cb0[3].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- element.wPosition.x; r3.y <- element.wPosition.y; r3.z <- element.wPosition.z

#line 31
  mov r0.zw, v[r0.y + 0][2].xxxy  // r0.z <- element.Tex.x; r0.w <- element.Tex.y

#line 32
  itof r4.xyzw, l(0, 0, 0, 1)  // r4.x <- element.Color.x; r4.y <- element.Color.y; r4.z <- element.Color.z; r4.w <- element.Color.w

#line 34
  mov o0.xyzw, r1.xyzw
  mov o1.xyz, r2.xyzx
  mov o2.xyz, r3.xyzx
  mov o3.xy, r0.zwzz
  mov o4.xyzw, r4.xyzw
  emit_stream m0

#line 35
  iadd r0.y, r0.y, l(-1)
endloop 

#line 37
cut_stream m0

#line 38
ret 
// Approximately 84 instruction slots used
