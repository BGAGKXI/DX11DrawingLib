//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 World;          // Offset:    0 Size:    64
//   row_major float4x4 matWVP;         // Offset:   64 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[3], immediateIndexed
dcl_input v0.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   o4.x <- <main return value>.wPos.x; o4.y <- <main return value>.wPos.y; o4.z <- <main return value>.wPos.z; 
//   o3.x <- <main return value>.wNormal.x; o3.y <- <main return value>.wNormal.y; o3.z <- <main return value>.wNormal.z; 
//   o2.x <- <main return value>.Color.x; o2.y <- <main return value>.Color.y; o2.z <- <main return value>.Color.z; o2.w <- <main return value>.Color.w; 
//   o1.x <- <main return value>.Tex.x; o1.y <- <main return value>.Tex.y; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 7 "D:\授業チEEタ\教材\3\シェーダプログラミングⅡ\ShaderProjectⅡ(学生Eɘver.2)\Shaders\flatShader_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.wNormal.x; r0.y <- output.wNormal.y; r0.z <- output.wNormal.z

#line 9
mov r1.xyz, v0.xyzx  // r1.x <- P.x; r1.y <- P.y; r1.z <- P.z
mov r1.w, l(1.000000)  // r1.w <- P.w

#line 12
dp4 r2.x, cb0[0].xyzw, r1.xyzw  // r2.x <- worldPos.x
dp4 r2.y, cb0[1].xyzw, r1.xyzw  // r2.y <- worldPos.y
dp4 r2.z, cb0[2].xyzw, r1.xyzw  // r2.z <- worldPos.z

#line 13
mov r1.xyzw, r1.xyzw  // r1.x <- output.Position.x; r1.y <- output.Position.y; r1.z <- output.Position.z; r1.w <- output.Position.w

#line 14
itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- output.Color.x; r3.y <- output.Color.y; r3.z <- output.Color.z; r3.w <- output.Color.w

#line 15
mov r4.xy, v2.xyxx  // r4.x <- output.Tex.x; r4.y <- output.Tex.y

#line 16
mov r2.xyz, r2.xyzx  // r2.x <- output.wPos.x; r2.y <- output.wPos.y; r2.z <- output.wPos.z

#line 18
mov o0.xyzw, r1.xyzw
mov o2.xyzw, r3.xyzw
mov o3.xyz, r0.xyzx
mov o4.xyz, r2.xyzx
mov o1.xy, r4.xyxx
ret 
// Approximately 16 instruction slots used
