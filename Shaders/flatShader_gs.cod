//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 World;          // Offset:    0 Size:    64
//   row_major float4x4 matWVP;         // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
//
gs_4_0
dcl_constantbuffer CB0[8], immediateIndexed
dcl_input_siv v[3][0].xyzw, position
dcl_input v[3][1].xy
dcl_input v[3][2].xyzw
dcl_input v[3][3].xyz
dcl_temps 6
dcl_inputprimitive triangle 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_maxout 3
//
// Initial variable locations:
//   m0 <- Stream; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; v[0][0].w <- input[0].Position.w; 
//   v[0][1].x <- input[0].Tex.x; v[0][1].y <- input[0].Tex.y; 
//   v[0][2].x <- input[0].Color.x; v[0][2].y <- input[0].Color.y; v[0][2].z <- input[0].Color.z; v[0][2].w <- input[0].Color.w; 
//   v[0][3].x <- input[0].wPos.x; v[0][3].y <- input[0].wPos.y; v[0][3].z <- input[0].wPos.z; 
//   v[1][0].x <- input[1].Position.x; v[1][0].y <- input[1].Position.y; v[1][0].z <- input[1].Position.z; v[1][0].w <- input[1].Position.w; 
//   v[1][1].x <- input[1].Tex.x; v[1][1].y <- input[1].Tex.y; 
//   v[1][2].x <- input[1].Color.x; v[1][2].y <- input[1].Color.y; v[1][2].z <- input[1].Color.z; v[1][2].w <- input[1].Color.w; 
//   v[1][3].x <- input[1].wPos.x; v[1][3].y <- input[1].wPos.y; v[1][3].z <- input[1].wPos.z; 
//   v[2][0].x <- input[2].Position.x; v[2][0].y <- input[2].Position.y; v[2][0].z <- input[2].Position.z; v[2][0].w <- input[2].Position.w; 
//   v[2][1].x <- input[2].Tex.x; v[2][1].y <- input[2].Tex.y; 
//   v[2][2].x <- input[2].Color.x; v[2][2].y <- input[2].Color.y; v[2][2].z <- input[2].Color.z; v[2][2].w <- input[2].Color.w; 
//   v[2][3].x <- input[2].wPos.x; v[2][3].y <- input[2].wPos.y; v[2][3].z <- input[2].wPos.z
//
#line 11 "D:\授業チEEタ\教材\3\シェーダプログラミングⅡ\ShaderProjectⅡ(学生Eɘver.2)\Shaders\flatShader_gs.hlsl"
mov r0.xyz, -v[0][0].zxyz
add r0.xyz, r0.xyzx, v[1][0].zxyz  // r0.x <- v1.z; r0.y <- v1.x; r0.z <- v1.y

#line 12
mov r1.xyz, -v[1][0].yzxy
add r1.xyz, r1.xyzx, v[2][0].yzxy  // r1.x <- v2.y; r1.y <- v2.z; r1.z <- v2.x

#line 13
mul r2.xyz, r0.zxyz, r1.yzxy
mul r0.xyz, r0.xyzx, r1.xyzx
mov r0.xyz, -r0.xyzx
add r0.xyz, r0.xyzx, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z

#line 14
mov r0.w, l(0)  // r0.w <- i
mov r1.x, r0.w  // r1.x <- i
loop 
  ilt r1.y, r1.x, l(3)
  breakc_z r1.y

#line 16
  mul r2.xyzw, cb0[4].xyzw, v[r1.x + 0][0].xxxx
  mul r3.xyzw, cb0[5].xyzw, v[r1.x + 0][0].yyyy
  add r2.xyzw, r2.xyzw, r3.xyzw
  mul r3.xyzw, cb0[6].xyzw, v[r1.x + 0][0].zzzz
  add r2.xyzw, r2.xyzw, r3.xyzw
  mul r3.xyzw, cb0[7].xyzw, v[r1.x + 0][0].wwww
  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- data.Position.x; r2.y <- data.Position.y; r2.z <- data.Position.z; r2.w <- data.Position.w

#line 17
  mul r1.yzw, r0.xxxx, cb0[0].xxyz
  mul r3.xyz, r0.yyyy, cb0[1].xyzx
  add r1.yzw, r1.yyzw, r3.xxyz
  mul r3.xyz, r0.zzzz, cb0[2].xyzx
  add r1.yzw, r1.yyzw, r3.xxyz
  dp3 r3.x, r1.yzwy, r1.yzwy
  rsq r3.x, r3.x
  mul r1.yzw, r1.yyzw, r3.xxxx  // r1.y <- data.wNormal.x; r1.z <- data.wNormal.y; r1.w <- data.wNormal.z

#line 18
  mov r3.xy, v[r1.x + 0][1].xyxx  // r3.x <- data.Tex.x; r3.y <- data.Tex.y

#line 19
  mov r4.xyzw, v[r1.x + 0][2].xyzw  // r4.x <- data.Color.x; r4.y <- data.Color.y; r4.z <- data.Color.z; r4.w <- data.Color.w

#line 20
  mov r5.xyz, v[r1.x + 0][3].xyzx  // r5.x <- data.wPos.x; r5.y <- data.wPos.y; r5.z <- data.wPos.z

#line 21
  mov o0.xyzw, r2.xyzw
  mov o1.xy, r3.xyxx
  mov o2.xyzw, r4.xyzw
  mov o3.xyz, r1.yzwy
  mov o4.xyz, r5.xyzx
  emit 

#line 22
  iadd r1.x, r1.x, l(1)
endloop 

#line 23
ret 
// Approximately 43 instruction slots used
