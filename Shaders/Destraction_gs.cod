//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   float4x4 World;                    // Offset:    0 Size:    64
//   float4x4 matWVP;                   // Offset:   64 Size:    64
//
// }
//
// cbuffer CBPerFrame3
// {
//
//   float4 Parameter;                  // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
// CBPerFrame3                       cbuffer      NA          NA            cb4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
gs_4_0
dcl_constantbuffer CB0[8], immediateIndexed
dcl_constantbuffer CB4[1], immediateIndexed
dcl_input v[3][0].xyz
dcl_input v[3][1].xyz
dcl_input v[3][2].xy
dcl_input v[3][3].xyzw
dcl_temps 12
dcl_inputprimitive triangle 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xy
dcl_output o4.xyzw
dcl_maxout 3
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; 
//   v[0][1].x <- input[0].Normal.x; v[0][1].y <- input[0].Normal.y; v[0][1].z <- input[0].Normal.z; 
//   v[0][2].x <- input[0].Tex.x; v[0][2].y <- input[0].Tex.y; 
//   v[0][3].x <- input[0].Color.x; v[0][3].y <- input[0].Color.y; v[0][3].z <- input[0].Color.z; v[0][3].w <- input[0].Color.w; 
//   v[1][0].x <- input[1].Position.x; v[1][0].y <- input[1].Position.y; v[1][0].z <- input[1].Position.z; 
//   v[1][1].x <- input[1].Normal.x; v[1][1].y <- input[1].Normal.y; v[1][1].z <- input[1].Normal.z; 
//   v[1][2].x <- input[1].Tex.x; v[1][2].y <- input[1].Tex.y; 
//   v[1][3].x <- input[1].Color.x; v[1][3].y <- input[1].Color.y; v[1][3].z <- input[1].Color.z; v[1][3].w <- input[1].Color.w; 
//   v[2][0].x <- input[2].Position.x; v[2][0].y <- input[2].Position.y; v[2][0].z <- input[2].Position.z; 
//   v[2][1].x <- input[2].Normal.x; v[2][1].y <- input[2].Normal.y; v[2][1].z <- input[2].Normal.z; 
//   v[2][2].x <- input[2].Tex.x; v[2][2].y <- input[2].Tex.y; 
//   v[2][3].x <- input[2].Color.x; v[2][3].y <- input[2].Color.y; v[2][3].z <- input[2].Color.z; v[2][3].w <- input[2].Color.w
//
#line 48 "D:\授業チEEタ\教材\3\シェーダプログラミングⅡ\ShaderProjectⅡ(学生Eɘver.2)\Shaders\Destraction_gs.hlsl"
add r0.xyz, v[1][0].xyzx, v[0][0].xyzx
add r0.xyz, r0.xyzx, v[2][0].xyzx
div r0.xyz, r0.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)  // r0.x <- center.x; r0.y <- center.y; r0.z <- center.z

#line 51
mov r1.xyz, -v[0][0].zxyz
add r1.xyz, r1.xyzx, v[1][0].zxyz
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mov r2.xyz, -v[0][0].yzxy
add r2.xyz, r2.xyzx, v[2][0].yzxy
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mul r3.xyz, r1.zxyz, r2.yzxy
mul r1.xyz, r1.xyzx, r2.xyzx
mov r1.xyz, -r1.xyzx
add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z

#line 55
nop 
mov r0.xy, r0.xyxx

#line 6
dp2 r0.w, r0.xyxx, l(54.356758, 78.356758, 0.000000, 0.000000)
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(43758.546875)
frc r0.w, r0.w  // r0.w <- <rand return value>

#line 55
mov r1.w, l(-0.500000)
add r0.w, r0.w, r1.w
mul r2.xyz, r0.wwww, l(2.000000, 2.000000, 2.000000, 0.000000)  // r2.z <- randomValue

#line 56
mov r2.xyz, r2.xyzx  // r2.x <- randomVector.x; r2.y <- randomVector.y; r2.z <- randomVector.z

#line 60
mov r0.w, cb4[0].y  // r0.w <- scalingFactor

#line 61
mov r1.w, cb4[0].z  // r1.w <- rotationFactor

#line 62
mov r2.w, cb4[0].w  // r2.w <- translationFactor

#line 64
mov r3.x, l(0)  // r3.x <- i
mov r3.y, r3.x  // r3.y <- i
loop 
  ilt r3.z, r3.y, l(3)
  breakc_z r3.z

#line 67
  itof r3.z, l(1)  // r3.z <- element.Position.w
  mov r4.xyz, v[r3.y + 0][0].xyzx  // r4.x <- element.Position.x; r4.y <- element.Position.y; r4.z <- element.Position.z

#line 68
  itof r3.w, l(0)
  mul r5.xyz, cb0[0].xyzx, v[r3.y + 0][1].xxxx
  mul r6.xyz, cb0[1].xyzx, v[r3.y + 0][1].yyyy
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, cb0[2].xyzx, v[r3.y + 0][1].zzzz
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, r3.wwww, cb0[3].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- element.wNormal.x; r5.y <- element.wNormal.y; r5.z <- element.wNormal.z

#line 69
  mov r6.xyzw, v[r3.y + 0][3].xyzw  // r6.x <- element.Color.x; r6.y <- element.Color.y; r6.z <- element.Color.z; r6.w <- element.Color.w

#line 70
  mov r7.xy, v[r3.y + 0][2].xyxx  // r7.x <- element.Tex.x; r7.y <- element.Tex.y

#line 73
  mov r8.xyz, -r0.xyzx
  add r4.xyz, r4.xyzx, r8.xyzx
  mov r3.w, -r0.w
  add r3.w, r3.w, l(1.000000)
  mul r4.xyz, r3.wwww, r4.xyzx
  add r4.xyz, r0.xyzx, r4.xyzx  // r4.x <- element.Position.x; r4.y <- element.Position.y; r4.z <- element.Position.z

#line 75
  nop 
  mov r8.xyz, -r0.xyzx
  add r4.xyz, r4.xyzx, r8.xyzx
  mul r8.xyz, r1.wwww, r2.xyzx

#line 36
  itof r4.w, l(0)
  nop 
  mov r8.xyz, r8.xyzx

#line 12
  sincos r3.w, null, r8.x  // r3.w <- sx
  sincos null, r5.w, r8.x  // r5.w <- cx

#line 13
  sincos r7.z, null, r8.y  // r7.z <- sy
  sincos null, r7.w, r8.y  // r7.w <- cy

#line 14
  sincos r8.x, null, r8.z  // r8.x <- sz
  sincos null, r8.y, r8.z  // r8.y <- cz

#line 16
  mul r9.x, r7.w, r8.y  // r9.x <- rot._m00

#line 17
  mul r10.x, r7.w, r8.x  // r10.x <- rot._m01

#line 18
  mov r11.x, -r7.z  // r11.x <- rot._m02

#line 20
  mul r8.z, r3.w, r7.z
  mul r8.z, r8.y, r8.z
  mul r8.w, r5.w, r8.x
  mov r8.w, -r8.w
  add r9.y, r8.w, r8.z  // r9.y <- rot._m10

#line 21
  mul r8.z, r3.w, r7.z
  mul r8.z, r8.x, r8.z
  mul r8.w, r5.w, r8.y
  add r10.y, r8.w, r8.z  // r10.y <- rot._m11

#line 22
  mul r11.y, r3.w, r7.w  // r11.y <- rot._m12

#line 24
  mul r8.z, r5.w, r7.z
  mul r8.z, r8.y, r8.z
  mul r8.w, r3.w, r8.x
  add r9.z, r8.w, r8.z  // r9.z <- rot._m20

#line 25
  mul r7.z, r5.w, r7.z
  mul r7.z, r8.x, r7.z
  mul r3.w, r3.w, r8.y
  mov r3.w, -r3.w
  add r10.z, r3.w, r7.z  // r10.z <- rot._m21

#line 26
  mul r11.z, r5.w, r7.w  // r11.z <- rot._m22

#line 28
  itof r9.w, l(0)  // r9.w <- rot._m30

#line 29
  itof r10.w, l(0)  // r10.w <- rot._m31

#line 30
  itof r11.w, l(0)  // r11.w <- rot._m32

#line 32
  mov r9.x, r9.x  // r9.x <- <rotation return value>._m00
  mov r9.y, r9.y  // r9.y <- <rotation return value>._m10
  mov r9.z, r9.z  // r9.z <- <rotation return value>._m20
  mov r9.w, r9.w  // r9.w <- <rotation return value>._m30
  mov r10.x, r10.x  // r10.x <- <rotation return value>._m01
  mov r10.y, r10.y  // r10.y <- <rotation return value>._m11
  mov r10.z, r10.z  // r10.z <- <rotation return value>._m21
  mov r10.w, r10.w  // r10.w <- <rotation return value>._m31
  mov r11.x, r11.x  // r11.x <- <rotation return value>._m02
  mov r11.y, r11.y  // r11.y <- <rotation return value>._m12
  mov r11.z, r11.z  // r11.z <- <rotation return value>._m22
  mov r11.w, r11.w  // r11.w <- <rotation return value>._m32

#line 36
  dp4 r8.x, r4.xyzw, r9.xyzw  // r8.x <- ret.x
  dp4 r8.y, r4.xyzw, r10.xyzw  // r8.y <- ret.y
  dp4 r8.z, r4.xyzw, r11.xyzw  // r8.z <- ret.z

#line 37
  mov r8.xyz, r8.xyzx  // r8.x <- <rotation return value>.x; r8.y <- <rotation return value>.y; r8.z <- <rotation return value>.z

#line 75
  add r4.xyz, r0.xyzx, r8.xyzx  // r4.x <- element.Position.x; r4.y <- element.Position.y; r4.z <- element.Position.z

#line 77
  mul r8.xyz, r1.xyzx, r2.wwww
  mul r8.xyz, r2.xyzx, r8.xyzx
  add r4.xyz, r4.xyzx, r8.xyzx

#line 78
  mov r4.xyz, r4.xyzx  // r4.x <- element.wPosition.x; r4.y <- element.wPosition.y; r4.z <- element.wPosition.z

#line 80
  mul r8.xyzw, r4.xxxx, cb0[4].xyzw
  mul r9.xyzw, r4.yyyy, cb0[5].xyzw
  add r8.xyzw, r8.xyzw, r9.xyzw
  mul r9.xyzw, r4.zzzz, cb0[6].xyzw
  add r8.xyzw, r8.xyzw, r9.xyzw
  mul r9.xyzw, r3.zzzz, cb0[7].xyzw
  add r8.xyzw, r8.xyzw, r9.xyzw  // r8.x <- element.Position.x; r8.y <- element.Position.y; r8.z <- element.Position.z; r8.w <- element.Position.w

#line 83
  mov o0.xyzw, r8.xyzw
  mov o1.xyz, r5.xyzx
  mov o2.xyz, r4.xyzx
  mov o3.xy, r7.xyxx
  mov o4.xyzw, r6.xyzw
  emit 

#line 84
  iadd r3.y, r3.y, l(1)
endloop 

#line 87
cut 

#line 88
ret 
// Approximately 130 instruction slots used
