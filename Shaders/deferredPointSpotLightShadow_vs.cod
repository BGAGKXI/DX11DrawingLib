//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_input v0.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   v3.x <- input.Color.x; v3.y <- input.Color.y; v3.z <- input.Color.z; v3.w <- input.Color.w; 
//   o4.x <- <main return value>.Tex.x; o4.y <- <main return value>.Tex.y; 
//   o3.x <- <main return value>.wPos.x; o3.y <- <main return value>.wPos.y; o3.z <- <main return value>.wPos.z; 
//   o2.x <- <main return value>.wNormal.x; o2.y <- <main return value>.wNormal.y; o2.z <- <main return value>.wNormal.z; 
//   o1.x <- <main return value>.Color.x; o1.y <- <main return value>.Color.y; o1.z <- <main return value>.Color.z; o1.w <- <main return value>.Color.w; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 7 "D:\授業チEEタ\教材\3\シェーダプログラミングⅡ\ShaderProjectⅡ(学生Eɘver.2)\Shaders\deferredPointSpotLightShadow_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- output.wNormal.x; r0.y <- output.wNormal.y; r0.z <- output.wNormal.z
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- output.wPos.x; r1.y <- output.wPos.y; r1.z <- output.wPos.z

#line 9
itof r2.w, l(1)  // r2.w <- output.Position.w
mov r2.xyz, v0.xyzx  // r2.x <- output.Position.x; r2.y <- output.Position.y; r2.z <- output.Position.z

#line 10
mov r3.xyzw, v3.xyzw  // r3.x <- output.Color.x; r3.y <- output.Color.y; r3.z <- output.Color.z; r3.w <- output.Color.w

#line 11
mov r4.xy, v2.xyxx  // r4.x <- output.Tex.x; r4.y <- output.Tex.y

#line 13
mov o0.xyzw, r2.xyzw
mov o1.xyzw, r3.xyzw
mov o2.xyz, r0.xyzx
mov o3.xyz, r1.xyzx
mov o4.xy, r4.xyxx
ret 
// Approximately 12 instruction slots used
