//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 World;          // Offset:    0 Size:    64
//   row_major float4x4 matWVP;         // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xy          4     NONE   float   xy  
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[8], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_output o5.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   o5.x <- <main return value>.D.x; o5.y <- <main return value>.D.y; o5.z <- <main return value>.D.z; o5.w <- <main return value>.D.w; 
//   o4.x <- <main return value>.Tex.x; o4.y <- <main return value>.Tex.y; 
//   o3.x <- <main return value>.wPosition.x; o3.y <- <main return value>.wPosition.y; o3.z <- <main return value>.wPosition.z; 
//   o2.x <- <main return value>.wNormal.x; o2.y <- <main return value>.wNormal.y; o2.z <- <main return value>.wNormal.z; 
//   o1.x <- <main return value>.Color.x; o1.y <- <main return value>.Color.y; o1.z <- <main return value>.Color.z; o1.w <- <main return value>.Color.w; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 9 "D:\授業チEEタ\教材\3\シェーダプログラミングⅡ\ShaderProjectⅡ(学生Eɘver.2)\Shaders\phongDepth_vs.hlsl"
mov r0.xyz, v0.xyzx  // r0.x <- P.x; r0.y <- P.y; r0.z <- P.z
mov r0.w, l(1.000000)  // r0.w <- P.w

#line 10
mul r1.xyzw, r0.xxxx, cb0[4].xyzw
mul r2.xyzw, r0.yyyy, cb0[5].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb0[6].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.wwww, cb0[7].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- output.Position.x; r1.y <- output.Position.y; r1.z <- output.Position.z; r1.w <- output.Position.w

#line 11
mul r2.xyz, r0.xxxx, cb0[0].xyzx
mul r3.xyz, r0.yyyy, cb0[1].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r0.xyz, r0.zzzz, cb0[2].xyzx
add r0.xyz, r0.xyzx, r2.xyzx
mul r2.xyz, r0.wwww, cb0[3].xyzx
add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- wPos.x; r0.y <- wPos.y; r0.z <- wPos.z

#line 12
mul r2.xyz, v1.xxxx, cb0[0].xyzx
mul r3.xyz, v1.yyyy, cb0[1].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyz, v1.zzzz, cb0[2].xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- wN.x; r2.y <- wN.y; r2.z <- wN.z

#line 13
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx

#line 14
itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- output.Color.x; r3.y <- output.Color.y; r3.z <- output.Color.z; r3.w <- output.Color.w

#line 17
mov r4.xy, v2.xyxx  // r4.x <- output.Tex.x; r4.y <- output.Tex.y

#line 18
mov r2.xyz, r2.xyzx  // r2.x <- output.wNormal.x; r2.y <- output.wNormal.y; r2.z <- output.wNormal.z

#line 19
mov r0.xyz, r0.xyzx  // r0.x <- output.wPosition.x; r0.y <- output.wPosition.y; r0.z <- output.wPosition.z

#line 20
mov r1.xyzw, r1.xyzw  // r1.x <- output.D.x; r1.y <- output.D.y; r1.z <- output.D.z; r1.w <- output.D.w

#line 22
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r3.xyzw
mov o5.xyzw, r1.xyzw
mov o2.xyz, r2.xyzx
mov o3.xyz, r0.xyzx
mov o4.xy, r4.xyxx
ret 
// Approximately 36 instruction slots used
